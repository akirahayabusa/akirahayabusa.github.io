<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dubbo学习之分布式系统定义</title>
      <link href="/blog/2021/02/21/dubbo-xue-xi-zhi-fen-bu-shi-xi-tong-ding-yi/"/>
      <url>/blog/2021/02/21/dubbo-xue-xi-zhi-fen-bu-shi-xi-tong-ding-yi/</url>
      
        <content type="html"><![CDATA[<div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"93febd1bf855592c6b20","clientSecret":"d7c076459be427fd2236e35b375a028b17b7e232","repo":"blogtalk","owner":"akirahayabusa","admin":["akirahayabusa"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解两种加密方式中私钥和公钥的概念</title>
      <link href="/blog/2021/02/09/li-jie-liang-chong-jia-mi-fang-shi-zhong-si-yao-he-gong-yao-de-gai-nian/"/>
      <url>/blog/2021/02/09/li-jie-liang-chong-jia-mi-fang-shi-zhong-si-yao-he-gong-yao-de-gai-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、两种加密方式"><a href="#一、两种加密方式" class="headerlink" title="一、两种加密方式"></a>一、两种加密方式</h2><h3 id="1-对称加密-私钥加密方法："><a href="#1-对称加密-私钥加密方法：" class="headerlink" title="1.对称加密_私钥加密方法："></a>1.对称加密_私钥加密方法：</h3><p>  私钥加密算法，又称 对称加密算法，因为这种算法解密密钥和加密密钥是相同的。也正因为同一密钥既用于加密又用于解密，所以这个<br>密钥是不能公开的。常见的有<a href="http://songlee24.github.io/2014/12/06/des-encrypt/">《DES加密算法》</a>、<a href="http://songlee24.github.io/2014/12/13/aes-encrypt/">《AES加密算法》</a>。</p><h3 id="2-不对称加密-公钥加密方法："><a href="#2-不对称加密-公钥加密方法：" class="headerlink" title="2.不对称加密_公钥加密方法："></a>2.不对称加密_公钥加密方法：</h3><p>  公钥和私钥成对出现</p><p>公开的密钥叫公钥，只有自己知道的叫私钥</p><p>用公钥加密的数据只有对应的私钥可以解密</p><p>用私钥加密的数据只有对应的公钥可以解密</p><p>如果可以用公钥解密，则必然是对应的私钥加的密</p><p>如果可以用私钥解密，则必然是对应的公钥加的密</p><p>公钥和私钥是相对的，两者本身并没有规定哪一个必须是公钥或私钥。</p><h2 id="二、实现数据的安全传输"><a href="#二、实现数据的安全传输" class="headerlink" title="二、实现数据的安全传输"></a>二、实现数据的安全传输</h2><p>要实现数据的安全传输，当然就要对数据进行加密了。</p><p>如果使用对称加密算法，加解密使用同一个密钥，除了自己保存外，对方也要知道这个密钥，才能对数据进行解密。如果你把密钥也一起传过去，就存在密码泄漏的可能。所以我们使用非对称算法，过程如下：</p><p>首先 接收方 生成一对密钥，即私钥和公钥；</p><p>然后，接收方 将公钥发送给 发送方；</p><p>发送方用收到的公钥对数据加密，再发送给接收方；</p><p>接收方收到数据后，使用自己的私钥解密。</p><p>由于在非对称算法中，公钥加密的数据必须用对应的私钥才能解密，而私钥又只有接收方自己知道，这样就保证了数据传输的安全性。</p><h3 id="三、对信息进行数字签名"><a href="#三、对信息进行数字签名" class="headerlink" title="三、对信息进行数字签名"></a>三、对信息进行数字签名</h3><p>除了保证数据的安全传输之外，公钥体系的另一个用途就是对数据进行签名。通常“数字签名”是用来验证发送方的身份并帮助保护数据的完整性。</p><p>例如：一个发送者 A 想要传些资料给大家，用自己的私钥对资料加密，即签名。这样一来，所有收到资料的人都可以用发送者的公钥进行验证，便可确认资料是由 A 发出来的了。（因为只有Ａ使用私钥签名得到的信息，才能用这个公钥来解） 采用数字签名，可以确认两点：</p><p>保证信息是由签名者自己签名发送的，签名者不能否认或难以否认。</p><p>保证信息自签发后到收到为止未曾作过任何修改。</p><p>之所以可以确认这两点，是因为用公钥可以解密的必然是用对应的私钥加的密，而私钥只有签名者持有。</p><h3 id="四、公钥算法的缺点"><a href="#四、公钥算法的缺点" class="headerlink" title="四、公钥算法的缺点"></a>四、公钥算法的缺点</h3><p>现实中，公钥机制也有它的缺点，那就是效率非常低，比常用的私钥算法（如 DES 和 AES）慢上一两个数量级都有可能。所以它不适合为大量的原始信息进行加密。为了同时兼顾安全和效率，我们通常结合使用公钥算法和私钥算法：</p><p>首先，发送方使用对称算法对原始信息进行加密。</p><p>接收方通过公钥机制生成一对密钥，一个公钥，一个私钥。</p><p>接收方 将公钥发送给 发送方。</p><p>发送方用公钥对对称算法的密钥进行加密，并发送给接收方。</p><p>接收方用私钥进行解密得到对称算法的密钥。</p><p>发送方再把已加密的原始信息发送给接收方。</p><p>接收方使用对称算法的密钥进行解密。</p><p>  注：本文转载自<a href="https://songlee24.github.io/2015/05/03/public-key-and-private-key/">理解公钥与私钥</a></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"93febd1bf855592c6b20","clientSecret":"d7c076459be427fd2236e35b375a028b17b7e232","repo":"blogtalk","owner":"akirahayabusa","admin":["akirahayabusa"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 技术随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从今天起我要开始更新自己的博客啦</title>
      <link href="/blog/2021/02/03/ha-ya-bu-sa-de-di-yi-pian-bo-ke/"/>
      <url>/blog/2021/02/03/ha-ya-bu-sa-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>#哈雅布撒的第一篇博客  </p><pre><code>                            一个初级菜鸟程序员明志！_                                    努力！奋斗！ 2021-02-03</code></pre><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"93febd1bf855592c6b20","clientSecret":"d7c076459be427fd2236e35b375a028b17b7e232","repo":"blogtalk","owner":"akirahayabusa","admin":["akirahayabusa"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
      
      
      <categories>
          
          <category> 个人随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
